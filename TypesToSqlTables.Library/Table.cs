using NpgsqlTypes;
using System.Collections;
using System.Net;
using System.Net.NetworkInformation;
using System.Reflection;
using System.Text;

namespace TypesToSqlTables.Library;

public class Table : Constants
{
    private string schemaName;

    public string SchemaName
    {
        get { return schemaName; }
        set { schemaName = value; }
    }

    private string tableName;

    public string TableName
    {
        get { return tableName; }
        set { tableName = value; }
    }

    private List<KeyValuePair<string, Type>> fieldsNameType = new List<KeyValuePair<string, Type>>();

    public List<KeyValuePair<string, Type>> FieldsNameType
    {
        get { return fieldsNameType; }
        set { fieldsNameType = value; }
    }

    public Table(Type type, string schema)
    {
        schemaName = schema;
        tableName = type.Name.ToLower();

        foreach (PropertyInfo property in type.GetProperties())
        {
            KeyValuePair<string, Type> fieldNameType = new KeyValuePair<string, Type>(property.Name.ToLower(), property.PropertyType);
            fieldsNameType.Add(fieldNameType);
        }
    }

    public string BuildSqlScriptCreateTable()
    {
        StringBuilder stringBuilder = new StringBuilder();

        stringBuilder.AppendLine($"CREATE TABLE {schemaName}.{tableName}");
        stringBuilder.AppendLine($"(");
        stringBuilder.AppendLine($"\tpk_{tableName}_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,");

        for (int i = 0; i < fieldsNameType.Count; i++)
        {
            KeyValuePair<string, Type> fieldNameType = fieldsNameType[i];

            if (typeMap.ContainsKey(fieldNameType.Value))
            {
                stringBuilder.Append($"\t{fieldNameType.Key} {typeMap[fieldNameType.Value]}");
            }
            else
            {
                // Complex type?
                stringBuilder.Append($"\t{fieldNameType.Key} bigint");
            }

            if (i < fieldsNameType.Count - 1)
            {
                stringBuilder.Append(",");
            }
            stringBuilder.Append(Environment.NewLine);
        }

        stringBuilder.AppendLine(");");

        return stringBuilder.ToString();
    }
}

